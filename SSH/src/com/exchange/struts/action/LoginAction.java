/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.exchange.struts.action;


import java.io.PrintWriter;
import java.util.Calendar;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.exchange.dao.UsersDAO;
import com.exchange.model.Users;
import com.exchange.struts.form.LoginForm;

/** 
 * MyEclipse Struts
 * Creation date: 11-17-2013
 * 
 * XDoclet definition:
 * @struts.action path="/login" name="loginForm" input="/user/login.jsp" scope="request" validate="true"
 */
public class LoginAction extends BaseAction {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		if(request.getMethod().equals("GET"))
		{
			
			return mapping.findForward("login");
		}
		System.out.println(request.getMethod());
		String method=request.getParameter("method");
		System.out.println("method="+method);
		//如果没有这个参数，是通过验证，进行跳转
		if(method==null){
			System.out.println("登录跳转");
			return mapping.findForward("loginSuccess");
		}
		//以下是验证用的
		System.out.println("登录验证");
		//获取帐号密码
        String idno=request.getParameter("idcardno");
        String password =request.getParameter("password");
        String question=request.getParameter("reminderquestion");
        String answer=request.getParameter("answerforreminder");
             
        UsersDAO userdao=null;
        String result="0";
        try{
        	userdao=(UsersDAO)getBean("UsersDAO");
            

            Users user=userdao.findById(idno);
            if(user!=null){
            	System.out.println("idno:"+user.getIdcardno()+",password:"+password);
            	//首先判断今天是否已经连续失败超过3次
            	Date lastlogdate=user.getLastlogontime();
            	//如果上次登录大的日期是昨天，则清空昨天的失败次数,前提是该账号没有被锁定
            	if(!user.getIslockon().equals("1")&&isbeforeToday(lastlogdate))
            	{
            		user.setContinuewrongcount((byte) 0);
            	}
            	if(!user.getIslockon().equals("1")){
            		  if(user.getPassword().equals(password)&&user.getReminderquestion().equals(question)&&user.getAnswerforreminder().equals(answer)){
                      	//用户登录成功
            			//清除连续登录失败次数，置为0
            			user.setContinuewrongcount((byte)0);
                      	result="1";	
                      }else{
                    	  //登录错误，增加今天连续失败登录的次数
                      	if(!user.getPassword().equals(password)){
                          	//密码不正确
                          	result="-1";
                          }else if(!user.getReminderquestion().equals(question)){
                          	//提示问题错误
                          	result="-2";
                          }else if(!user.getAnswerforreminder().equals(answer))
                          {
                          	//问题答案错误
                          	result="-3";
                          }
                      	user.setContinuewrongcount((byte)(user.getContinuewrongcount()+1));
                      	//如果登录次数大于等于3时，锁定改账号
                      	if(user.getContinuewrongcount()>=3){
                      		user.setIslockon("1");
                      	}
                      }
            		//账号没被锁定，不管有没有登录成功，日期都要修改
          			user.setLastlogontime(new Date());
            	}else{
            		//用户已经被锁定
            		result="-4";
            	}
              
            }else{
            	//无该用户，也就是身份证号不存在
            	result="-5";
            }
            //把user修改结果保存到数据库中
            if(user!=null){
                userdao.attachDirty(user);              
            }
            //写出反馈
            response.setCharacterEncoding("utf-8");
            response.setContentType("html/text");
            PrintWriter out=null;
            try{
            	out=response.getWriter();
            	out.write(result);
            	out.flush();
            	out.close();
            	
            }catch(Exception e)
            {
            	e.printStackTrace();
            }
        }catch(Exception e){
        	e.printStackTrace();
        }
        return null;
	}
	
	private boolean isbeforeToday(Date old)
	{
		boolean result=true;
		Calendar oldcal=Calendar.getInstance();
		oldcal.setTime(old);
		
		Calendar todaycal=Calendar.getInstance();
		todaycal.setTime(new Date());
		
		oldcal.set(Calendar.HOUR, 0);
		oldcal.set(Calendar.MINUTE, 0);
		oldcal.set(Calendar.SECOND, 0);
		
		todaycal.set(Calendar.HOUR, 0);
		todaycal.set(Calendar.MINUTE, 0);
		todaycal.set(Calendar.SECOND, 0);
		
		int intrvalmilli=(int)(todaycal.getTimeInMillis()-oldcal.getTimeInMillis())/(24*60*60*1000);
		
		if(intrvalmilli>0){
			result=true;
		}else{
			result=false;
		}
		return result;
	}
}